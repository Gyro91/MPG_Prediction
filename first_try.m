function [Y,Xf,Af] = first_try(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 28-Oct-2016 18:33:33.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.44313212458819;-1.20289703711877;-1.53064480621715];
x1_step1.gain = [0.680401697813284;0.538862212771038;0.415208558408593];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.5791873898377213337;-3.6143238929678114246;-4.0025684364011171468;-2.3343751142277637811;1.8930920746530017773;2.7636460541895111476;-0.43522303716660204476;1.2336318345477819136;0.76357318474968105537;0.23074401769947347485;0.023097994532122273492;0.43986652897488770497;1.0950608698063881707;-1.654480334408654274;-1.1796455913492136514;-2.9268956600509383748;-2.0905789106510530573;-2.6132973950735789437;3.5733085762112137829;3.714479884124067155];
IW1_1 = [-0.82166802792131299338 2.9985220224479411932 2.5555513054776901605;1.8143714814411038283 1.6680059917779999079 2.7863180119105868116;0.46826510118629705026 1.3328810718468946384 -2.7401490803393744322;0.62859826026086307316 3.3749399840472276146 1.5731713320006084356;-1.9896602457205065928 2.1068954194406108726 2.7622131637441982299;-0.33349008926928147556 3.0702253405999120339 -1.5513415969639527958;2.1023345613944695032 -2.8845521273304979282 2.5483416455034109127;-2.0123683939790795172 -1.3559782466634060505 -2.8679878865546593047;-0.42055888314494427327 -0.91067486839522382436 -3.8151472462128062091;-0.53814899494990564577 -1.6949890778115239698 -3.5488934442307149553;1.3904356742056092067 -2.8121148991595381617 2.4487905006170964661;0.31441607213652650321 3.2702859421855077215 2.1165095140486984704;1.4008973648164326775 2.5156578388049539718 2.8275005000003896605;-0.3227987267272029448 -3.5642347109052279208 1.1077748886435088149;-0.8293688938757780571 -3.0564525046109674022 2.623342404854986043;-1.7412557141378828263 0.54669320469751070402 -3.1234827432354994592;-3.381037385095888137 -1.1831138994140395493 -1.6360176645085566793;-0.88663772489594128157 -3.9313007224136908846 -1.6185739174498023907;3.6178887384483449097 -0.76905826668911170252 -0.3570034006226868728;1.9611987415115195166 -2.1580539600722752347 2.538170086693168237];

% Layer 2
b2 = 0.14459349058964743318;
LW2_1 = [-0.78207258031452764335 0.11808849909794931488 -0.29823440154124669643 -0.069949816501506195676 0.13834913667835191387 -0.88373061978684175344 0.96775841412533547548 0.35414435643600133963 0.48518196041187089396 -0.79825120089220036323 -0.85029804631493688394 -0.55487215546475765482 -0.0051237019124532080794 0.22780963367011586307 -0.36450913464977496847 -0.69085479471966171339 0.79514910263052596129 -0.60322189686415728094 -0.58534587452655162387 0.65290195794430772036];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.415743846413074;
y1_step1.xoffset = -1.85703710292592;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
